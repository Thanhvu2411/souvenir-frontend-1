#!/bin/bash

# GIFTIE - SOUVENIR STORE
# Script kh·ªüi ch·∫°y project v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p

echo "üéÅ GIFTIE - SOUVENIR STORE"
echo "=========================="
echo ""

# Ki·ªÉm tra Node.js
check_node() {
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Node.js 18+ tr∆∞·ªõc."
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        echo "‚ùå Node.js version qu√° c≈©. C·∫ßn Node.js 18+ (hi·ªán t·∫°i: $(node -v))"
        exit 1
    fi
    
    echo "‚úÖ Node.js: $(node -v)"
}

# Ki·ªÉm tra Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker daemon kh√¥ng ch·∫°y."
        return 1
    fi
    
    echo "‚úÖ Docker: $(docker --version)"
    return 0
}

# Ch·∫°y v·ªõi Node.js
run_node() {
    echo ""
    echo "üöÄ Kh·ªüi ch·∫°y v·ªõi Node.js..."
    cd frontend
    
    if [ ! -d "node_modules" ]; then
        echo "üì¶ C√†i ƒë·∫∑t dependencies..."
        npm install
    fi
    
    echo "üî• Ch·∫°y development server..."
    npm run dev
}

# Ch·∫°y v·ªõi Docker
run_docker() {
    echo ""
    echo "üê≥ Kh·ªüi ch·∫°y v·ªõi Docker..."
    
    if [ ! -f "frontend/Dockerfile" ]; then
        echo "‚ùå Dockerfile kh√¥ng t·ªìn t·∫°i."
        return 1
    fi
    
    echo "üî® Build Docker image..."
    docker build -t giftie-frontend ./frontend
    
    if [ $? -eq 0 ]; then
        echo "üöÄ Ch·∫°y Docker container..."
        docker run -p 3000:3000 giftie-frontend
    else
        echo "‚ùå Build Docker th·∫•t b·∫°i."
        return 1
    fi
}

# Ch·∫°y v·ªõi Docker Compose
run_docker_compose() {
    echo ""
    echo "üê≥üê≥ Kh·ªüi ch·∫°y v·ªõi Docker Compose..."
    
    if [ ! -f "docker-compose.yml" ]; then
        echo "‚ùå docker-compose.yml kh√¥ng t·ªìn t·∫°i."
        return 1
    fi
    
    echo "üöÄ Ch·∫°y services..."
    docker-compose up
}

# Menu ch√≠nh
show_menu() {
    echo ""
    echo "Ch·ªçn ph∆∞∆°ng ph√°p ch·∫°y project:"
    echo "1) üöÄ Node.js (Development)"
    echo "2) üê≥ Docker (Production)"
    echo "3) üê≥üê≥ Docker Compose (Production)"
    echo "4) üì¶ C√†i ƒë·∫∑t dependencies"
    echo "5) üî® Build production"
    echo "6) üßπ Clean up"
    echo "7) ‚ùå Tho√°t"
    echo ""
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-7): " choice
}

# C√†i ƒë·∫∑t dependencies
install_deps() {
    echo ""
    echo "üì¶ C√†i ƒë·∫∑t dependencies..."
    cd frontend
    
    echo "üîß C√†i ƒë·∫∑t v·ªõi npm..."
    npm install
    
    echo "‚úÖ Ho√†n th√†nh!"
}

# Build production
build_production() {
    echo ""
    echo "üî® Build production..."
    cd frontend
    
    echo "üèóÔ∏è Building..."
    npm run build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build th√†nh c√¥ng!"
        echo "üöÄ Ch·∫°y production server: npm start"
    else
        echo "‚ùå Build th·∫•t b·∫°i."
    fi
}

# Clean up
cleanup() {
    echo ""
    echo "üßπ Clean up..."
    
    echo "üóëÔ∏è X√≥a node_modules..."
    rm -rf frontend/node_modules
    
    echo "üóëÔ∏è X√≥a .next..."
    rm -rf frontend/.next
    
    echo "üóëÔ∏è X√≥a Docker images..."
    docker rmi giftie-frontend 2>/dev/null || true
    
    echo "‚úÖ Clean up ho√†n th√†nh!"
}

# Main script
main() {
    check_node
    
    while true; do
        show_menu
        
        case $choice in
            1)
                run_node
                break
                ;;
            2)
                if check_docker; then
                    run_docker
                else
                    echo "‚ùå Kh√¥ng th·ªÉ ch·∫°y Docker."
                fi
                break
                ;;
            3)
                if check_docker; then
                    run_docker_compose
                else
                    echo "‚ùå Kh√¥ng th·ªÉ ch·∫°y Docker Compose."
                fi
                break
                ;;
            4)
                install_deps
                ;;
            5)
                build_production
                ;;
            6)
                cleanup
                ;;
            7)
                echo "üëã T·∫°m bi·ªát!"
                exit 0
                ;;
            *)
                echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-7."
                ;;
        esac
        
        if [ $choice -ge 1 ] && [ $choice -le 3 ]; then
            break
        fi
    done
}

# Ch·∫°y script
main

